---
import Link from "@components/Link.astro";
import { Icon } from "astro-icon/components";
import { twitter, author, defaultMeta, navigation } from "@data/constants";
import "@fontsource-variable/inter";

interface Props {
  title?: string;
  description?: string;
  ogImage?: {
    src: string;
    alt: string;
  };
  pubDate?: Date;
  wide?: boolean;
}

const {
  title = defaultMeta.title,
  description = defaultMeta.description,
  ogImage = defaultMeta.ogImage,
  pubDate,
  wide = false,
} = Astro.props;

const ogImageURL = new URL(ogImage.src, Astro.site).href;
const canonicalURL = new URL(Astro.url).href;
---

<!doctype html>
<html lang="en-US" class="dark:[color-scheme:dark] scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageURL} />
    <meta property="og:site_name" content={author} />
    <meta property="og:image:alt" content={ogImage.alt} />
    <meta property="og:locale" content="en_US" />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta name="twitter:site" content={twitter} />
    <meta name="twitter:creator" content={twitter} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImageURL} />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="follow, index" />
    <meta name="author" content={author} />
    {
      pubDate && (
        <meta
          property="article:published_time"
          content={pubDate.toISOString()}
        />
      )
    }
  </head>
  <body
    class="dark:bg-zinc-950 bg-zinc-50 antialiased selection:bg-zinc-700 selection:text-zinc-100 dark:selection:bg-zinc-500 dark:selection:text-white pt-10 2xl:text-lg"
  >
    <a
      href="#main-content"
      class="absolute opacity-0 focus:opacity-100 border-transparent border-y border-r dark:focus:border-zinc-900 text-xs lg:text-sm px-4 py-1.5 lg:py-2 top-1 lg:top-[41px] transition-transform duration-300 rounded-r-full bg-green-400 dark:bg-zinc-800 font-medium text-zinc-800 dark:text-zinc-200 focus:outline-none -translate-x-full focus:translate-x-0"
      >Skip to main content</a
    >
    <nav
      class="mb-16 mx-auto flex overflow-x-auto px-6 lg:px-2 sm:overflow-x-visible"
      class:list={{
        "max-w-4xl": wide,
        "max-w-3xl": !wide,
      }}
    >
      <ul class="flex justify-evenly space-x-6">
        {
          navigation.map((item) => (
            <li>
              <Link {...item} />
            </li>
          ))
        }
      </ul>
    </nav>
    <main
      class="px-6 lg:px-2 mx-auto dark:text-zinc-400 text-zinc-600"
      id="main-content"
      class:list={{
        "max-w-4xl": wide,
        "max-w-3xl": !wide,
      }}
    >
      <slot />
    </main>
    <footer class="mt-12 pb-12">
      <div
        class="mx-auto max-w-4xl px-6 lg:px-2 text-center text-xs lg:text-sm dark:text-zinc-400 text-zinc-600"
      >
        <p>
          &copy; {new Date().getFullYear()}
          {author}. All rights reserved. <span
            ><a
              href="https://github.com/exylons/astrozinc"
              class="hover:underline">Source Code.</a
            ></span
          >
        </p>
      </div>
    </footer>
    <div>
      <button
        id="dark-mode-toggle"
        class="fixed bottom-4 right-4 p-3 bg-zinc-200 hover:bg-zinc-300 dark:bg-zinc-800 dark:hover:bg-zinc-700 rounded-full focus:outline-none"
        aria-label="Toggle theme mode"
      >
        <Icon
          name="moon"
          class="w-6 h-6 dark:text-zinc-100 text-zinc-900 sun-icon"
        />
        <Icon
          name="sun"
          class="w-6 h-6 dark:text-zinc-100 text-zinc-900 moon-icon"
        />
      </button>
    </div>
  </body>
</html>

<script is:inline async>
  const darkModeToggle = document.getElementById("dark-mode-toggle");
  const darkClass = "dark";
  const htmlTag = document.querySelector("html");

  function applyDarkMode(isDark) {
    htmlTag.classList.toggle(darkClass, isDark);
    htmlTag.setAttribute("data-theme", isDark ? "min-dark" : "min-light");
    const sunIcon = document.querySelector(".sun-icon");
    const moonIcon = document.querySelector(".moon-icon");
    sunIcon.classList.toggle("hidden", isDark);
    moonIcon.classList.toggle("hidden", !isDark);
  }

  function getCookie(name) {
    const value = `; `;
    const parts = document.cookie.split(value);
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i].split("=");
      if (part[0].trim() === name) {
        return part[1];
      }
    }
    return null;
  }

  function setCookie(name, value, expirationDays) {
    const date = new Date();
    date.setTime(date.getTime() + expirationDays * 24 * 60 * 60 * 1000);
    const expires = `expires=${date.toUTCString()}`;
    document.cookie = `${name}=${value}; ${expires}; path=/`;
  }

  const isDarkMode = getCookie("darkMode") === "true";
  applyDarkMode(isDarkMode);

  darkModeToggle.addEventListener("click", () => {
    const isDark = htmlTag.classList.contains(darkClass);
    applyDarkMode(!isDark);
    setCookie("darkMode", !isDark, 30);
  });
</script>

<style>
  body::-webkit-scrollbar {
    width: 8px;
  }

  body::-webkit-scrollbar-thumb {
    @apply bg-zinc-400;
  }

  .dark body::-webkit-scrollbar-thumb {
    @apply bg-zinc-800;
  }
</style>
